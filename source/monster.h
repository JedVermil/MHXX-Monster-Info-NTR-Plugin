#pragma once

#include "global.h"

#define MAX_POINTERS_IN_LIST 10
#define MAX_PARTS_PER_MONSTER 8

#pragma pack(push,1)

//Parts info
typedef struct
{
  u16 unknown;      //0x0
  u32 fixed;        //0x2: F8 99 D0 00
  u8 stagger_count; //0x6
  u8 break_count;   //0x7
  u16 stagger_hp;   //0x8
  s16 break_hp;     //0xA  
} Part;

//Monster info (incomplete)
typedef struct
{
  u8 pad_0x0[0xD];
  u8 location_flag;     //0xD: 4C = in current map, 44 = not in current map
  u8 pad_0xE[0x2];
  u8 is_despawned;      //0x10: 7 = despawned, F = visible
  u8 pad_0x11[0x106F];
  u16 action;           //0x1080: monster action state (FFFF for small monsters)
  u8 pad_0x1082[0x1E0];
  u8 identifier2;       //0x1262: 00 or 80 for small monsters, 20 for ~drome type, 60 for Great Maccao, 08 for Kirin, otherwise ...
                        //        04 or 44 for regular monsters, 0C or 4C for hyper monsters or special monsters (eg. Alatreon)
                        //        Note: deviant/special-form monsters can have either, depending on the species, so not useful for differentiating those
  u8 pad_0x1263[0x5];
  float size_multiplier;//0x1268: sometimes actual size is larger, see 0x1272 for a possible flag triggering this
  u8 pad_0x126C[0x1AC];
  u32 hp;               //0x1418
  u32 max_hp;           //0x141C
  u8 pad_0x1420[0x3E];
  Part parts[8];        //0x145E
  u8 pad_0x14BE[0x543E];
  u16 poison;           //0x68FC
  u16 max_sleep;        //0x68FE: unlike other max values, only increases after abnormal state ends (e.g. awakens)
  u16 sleep;            //0x6900
  u8 pad_0x6902[0x6];
  u16 max_poison;       //0x6908
  u8 pad_0x690A[0x2];
  u32 poison_timer;     //0x690C
  u32 poison_deactivate_timer;  //0x6910: starts after the poison kicks in
  u16 max_paralysis;    //0x6914
  u16 paralysis;        //0x6916
  u32 paralysis_timer;  //0x6918
  u8 pad_0x691C[0x4E];
  u8 is_asleep;         //0x696A: 00 normal 01 asleep or dead
  u8 pad_0x696B[0x5D];
  u8 poison_count;      //0x69C8: increase by 1 after poison ends
  u8 paralysis_count;   //0x69C9: increase by 1 after paralysis ends
  u8 sleep_count;       //0x69CA: increase by 1 after sleep ends
  u8 pad_0x69CB[0xB];
  u16 dizzy;            //0x69D6
  u16 max_dizzy;        //0x69D8
  u8 pad_0x69DA[0x2];
  u32 dizzy_timer;      //0x69DC
  u8 dizzy_count;       //0x69E0: increase by 1 after dizzy ends
  u8 pad_0x69E1[0x1];
  u16 exhaust;          //0x69E2
  u16 max_exhaust;      //0x69E4
  u8 pad_0x69E6[0x2];
  u32 exhaust_timer;    //0x69E8
  u8 pad_0x69EC[0x2];
  u16 stumble;          //0x69EE: need testing, increases when jump attacks land, resets to 0 once monster falls
  u8 pad_0x69F0[0xA];
  u16 jump;             //0x69FA
  u16 max_jump;         //0x69FC
  u8 pad_0x69FE[0x6];
  u8 jump_counter;      //0x6A04: increase by 1 when jump attack reaches threshold
  u8 ride_counter;      //0x6A05: increase by 1 when ride finishes regardless of success
  u8 blast_counter;     //0x6A06: increase by 1 everytime a blast occurs
  u8 pad_0x6A07[0x1];
  u16 max_blast;        //0x6A08
  u16 blast;            //0x6A0A
  u8 pad_0x6A0C[0x4];
  u32 blast_timer;      //0x6A10: not entirely sure about this
  u8 pad_0x6A14[0x50];
  u8 status;            //0x6A64: indicates active abnormal stats: sleep=1 poison=2 paralysis=4 dizzy=10
  u8 pad_0x6A65[0x309];
  u8 is_rideon;         //0x6D6E: 00 normal 01 riding
  u8 pad_0x6D6F[0x99];
  u16 identifier1;      //0x6E08: unique for each monster, except hyper versions
  } Monster;
/* Notes:
naming convention:
  static: always or almost always fixed for a given monster
  fixed: always fixed to some value
  unused: always 0
  vary: changes between quests, but stays constant within the quest
  dynamic: changes within the quest
  pair: has some kind of relationship with another field
  0x0:    1byte static. Similar monsters may have same value (rathalos and rathian), but otherwise somewhat unique
  0x1:    2bytes static. Different for each big monster(except special, and changes when not first monster), but for small monsters is B1 4F or B2 4F
  0x3:    1byte fixed. Fixed at 1
  0x4:    8bytes unused.
  0xC:    1byte fixed. Fixed at 22
  0xE:    1byte fixed. Fixed at 1
  0xF:    1byte vary. Mosly 00 for large but can be different (Lv10 Hellblade),varies for small
  0x11:   1byte fixed. Fixed at 8
  0x12:   2bytes unused.
  0x14:   8bytes 2 pointers. Can be null; always null at base camp, both always different
  0x1C:   3bytes dynamic.
  0x1F:   1byte dynamic. 40 for big monsters (sometimes not true), dynamic for small
  0xF0:   1byte pair. Same as 0x230
  0xFC:   1byte dynamic. Small numbers
  0x10C:  4bytes pair. Same as 0x1BC; random value for big, last 3 are FF for small; for small first byte can be dynamic
  0x110:  4bytes vary. Random value for big, FFFFFFFF or 0 for small
  0x118:  1byte dynamic. Starts at FF but changes to BF when low health. Values can be different for different monsters. Same value as 0x1C8 except during initial loading
  0x166:  1byte dynamic. Starts at 00 during initial loading but changes to 01 after quest begins. Spawned monsters don't have this behavior and start at 1
  0x1BC:  4bytes pair. Same as 0x10C
  0x1C8:  1byte dynamic. Starts as 00 during initial loading, changes to same value as 0x118 after quest begins, and changes values with it as well
  0x228:  1byte static. May define some kind of grouping, but not obvious. Somewhat unique between monsters.
  0x230:  1byte pair. Same as 0xF0
  0x242:  1byte dynamic.
  0x256:  1byte dynamic.
  0x263:  1byte dynamic. Changes slowly. Some possibilities: 40, 3F
  0x28B:  1byte dynamic.
  0x372:  1byte pair. Sometimes same as 0xC0A, generally small numbers 04~12, not unique for monsters
  0xBCA:  1byte vary. Some possibilities: 0A, 09, 0C, 10, 0F
  0xBCC:  1byte vary. Single digit numbers, seems to be 1 for small but can vary for large
  0xBD0:  1byte vary.
  0xC0A:  1byte pair. Sometimes same as 0x372
  0xC0C:  1byte vary. Almost static
  0xC14:  1byte vary. Almost static
  0xC18:  1byte vary. Almost static
  0xC1C:  1byte vary. Mostly 00 for small monsters, not unique for large monsters
  0xC84:  1byte pair. Same as 0xC8C and 0xF08; varies
  0xC8C:  1byte pair. Same as 0xC84 and 0xF08
  0xCF3:  1byte vary.
  0xD05:  1byte dynamic. Small numbers
  0xD08:  1byte dynamic. Small numbers
  0xD7F:  1byte dynamic. Changes slowly. Some possibilities: 00, 41, 40
  0xEB7:  1byte dynamic. Mostly 31, but can be 00
  0xEF4:  1byte vary. Not unique for monsters
  0xF08:  1byte pair. Same as 0xC84 and 0xC8C
  0xF14:  1byte vary. Not unique for monsters
  0xF19:  1byte vary. Mostly A8, but can be A7, 00, ...
  0xFE8:  1byte dynamic. Small numbers
  0xFEC:  1byte vary. Seems to be able to tell velocidrome apart but has multiple values each (depending on quest level?)
  0x1037: 1byte dynamic. Changes very fast. Most commonly 40
  0x103B: 1byte dynamic. Changes slowly. Some possibilities: 40, 3F
  0x1075: 1byte dynamic.
  0x10A0: 1byte vary. Almost static
  0x10A4: 1byte vary.
  0x10A8: 1byte vary.
  0x10F3: 1byte dynamic.
  0x1123: 1byte dynamic. 00 for most monsters, but for rathalos/rathian family can be 00,40,41,42 changing somewhat periodically
  0x1170: 1byte static. Rapidly changes dynamically between 00/02/04 for Celtas, CD for Gypceros derivatives, FF for Zinogre, 24 for Raging Brachydios, 01 for Furious Rajang, 00 for everything else
  0x1259: 1byte dynamic. Usually 01
  0x125F: 1byte dynamic. Usually 02
  0x1260: 1byte static. 49 for most mosnters, 09 for most of the special monsters (like Kushala Daora), and still others exist
  0x1266: 1byte static. Mostly unique between monsters. Can be used to differentiate between regular/deviant. Can be used to differentiate different-size or male/female small monsters (like Aptonoth)
  0x1272: 1byte dynamic. 
  0x12C3: 1byte dynamic. Starts at 00, turns to 30 and stays there shortly after quest begins
  0x13B2: 2byte dynamic. Starts at 80 BF, then starts to change quickly once discovered player
  0x13B6: 2byte dynamic. Starts at 80 BF, then starts to change quickly once discovered player
  0x1410: 1byte dynamic. Mostly FF, but can change to something else quickly
  0x1430: 4bytes vary. Some possibilities: 3F59999A, 3F400000, 3F4CCCCD; fixed within quest; can vary between same monster
  0x1438: 1byte static. 9A for Furious Rajang, 00 for everything else
  0x1439: 1byte static. 99 for Furious Rajang, 00 for everything else
  0x143A: 1byte static. 99 for Furious Rajang, 80 for everything else
  0x1445: 1byte vary. Thought was bit pattern that could tell variant monsters from normal (gold rathian vs rathian at bit position 0x40) but turns out it doesn't always work
  0x1447: 1byte vary. 00, 01, or 03 (maybe quest level?)
  0x3AD8: 1byte fixed. Fixed at 01
  0x6A07: 1byte vary.
  0x69E1: 1byte fixed. Fixed at FF. Haven't tested many monsters
  0x6B5C: 1byte dynamic. Some kind of state: 00, 01, 02, 03
  0x6B04: 1byte vary.
  0x6BEC: 1byte dynamic. Some kind of flag. Starts at 00, after a while turns 01, and returns to 00 after death. Does not indicate capturability
  0x6E30: 1byte static. Can be used to tell feline apart. Grouping is not obvious, and unrelated monsters can have same value
*/

typedef struct
{
  u8 fixed;         //0x0: fixed at 1
  u8 unused[0xF];   //0x1
  Monster* m[MAX_POINTERS_IN_LIST];   //0x10
  u8 count;         //0x38: number of pointers
} MonsterPointerList;

#pragma pack(pop)

typedef struct
{
  u16 max_stagger_hp;
  s16 max_break_hp;
} PartCache;

typedef struct
{
  Monster* m;       //set to 0 to deactivate
  PartCache p[8];
  u16 break_hp_sum; //only sum displayable parts
} MonsterCache;

typedef struct {
  char name[4];
  char jp_name[4];  //a misaki string
  u8 stagger_limit; //number of staggers before part breaks
  u8 break_limit;   //number of breaks before part breaks
} PartInfo;

typedef struct {
  u32 id;           //identifier1 concat with identifier2, which makes unique id for each monster type
  char name[11];
  char jp_name[14]; //a misaki string
  u8 is_hyper;
  float base_size;
  float s_size;
  float l_size;
  float xl_size;
  PartInfo p_info[8];
} MonsterInfo;

//monster database
static MonsterInfo unknown = {0x0, "UNKNOWN", {0xf0, 0x08,0x08,0x08, 0xFF}, 0};
static MonsterInfo database[] = {
  {0x195080, "Aptonoth", {0xf0, 0x97,0xcc,0xbd,0xc3,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x19A000, "Apceros", {0xf0, 0x97,0xcc,0xa6,0xe2,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x19F080, "Kelbi", {0xf0, 0xa6,0xe0,0xc8, 0xFF}, 0, 0, 0, 0, 0},
  {0x1A4000, "Mosswine", {0xf0, 0xd7,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x1A9000, "Hornetaur", {0xf0, 0xa0,0xe8,0xb4,0xe2,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x1AE000, "Vespoid", {0xf0, 0xde,0xe8,0xa9,0xae,0xb4, 0xFF}, 0, 0, 0, 0, 0},
  {0x1B3000, "Felyne", {0xf0, 0x97,0x99,0xe0,0xee, 0xFF}, 0, 0, 0, 0, 0},
  {0x1B8000, "Melynx", {0xf0, 0xd6,0xde,0xe0,0xee, 0xFF}, 0, 0, 0, 0, 0},
  {0x1BD000, "Velociprey", {0xf0, 0xde,0xe8,0xd2,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x1C2000, "Genprey", {0xf0, 0xa7,0xc2,0xd2,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x1C7000, "Ioprey", {0xf0, 0x99,0xee,0x9f,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x1CC000, "Cephalos", {0xf0, 0xa1,0xe1,0x9f,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x1D1000, "Bullfango", {0xf0, 0xcb,0xe0,0xca,0x96,0xe8,0xa9, 0xFF}, 0, 0, 0, 0, 0},
  {0x1D6080, "Popo", {0xf0, 0xd2,0xd2, 0xFF}, 0, 0, 0, 0, 0},
  {0x1DB000, "Giaprey", {0xf0, 0xa3,0x97,0xc3,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x1E0080, "Anteka", {0xf0, 0xa1,0x9b,0xac,0xa0, 0xFF}, 0, 0, 0, 0, 0},
  {0x1E5000, "Remobra", {0xf0, 0xa1,0xcb,0xde,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x1EA000, "Hermitaur", {0xf0, 0xd9,0x9f,0xab,0xd4, 0xFF}, 0, 0, 0, 0, 0},
  {0x1EF000, "Ceanataur", {0xf0, 0xa1,0xd4,0xab,0xd4, 0xFF}, 0, 0, 0, 0, 0},
  {0x1F4000, "Blango", {0xf0, 0xcb,0xde,0xe8,0xa9, 0xFF}, 0, 0, 0, 0, 0},
  {0x1F9000, "Rhenoplos", {0xf0, 0xdf,0xc3,0xcc,0xe2,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x1FE000, "Bnahabra", {0xf0, 0xcb,0xbf,0xc4,0xcb,0xde, 0xFF}, 0, 0, 0, 0, 0},
  {0x203000, "Altaroth", {0xf0, 0x9f,0xe0,0xb4,0xe2,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x208000, "Jaggi", {0xf0, 0xad,0xd8,0xa3,0x98, 0xFF}, 0, 0, 0, 0, 0},
  {0x20D000, "Jaggia", {0xf0, 0xad,0xd8,0xa3,0x98,0xc3,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x212000, "Ludroth", {0xf0, 0xe0,0xbe,0xe2,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x217000, "Uroktor", {0xf0, 0x9b,0xe2,0xa8,0xbd,0xe0, 0xFF}, 0, 0, 0, 0, 0},
  {0x21C080, "Slagtoth", {0xf0, 0xaf,0xe4,0xe2,0xd2,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x221080, "Gargwa", {0xf0, 0xa1,0xee,0xa5,0x96, 0xFF}, 0, 0, 0, 0, 0},
  {0x226000, "Zamite", {0xf0, 0xae,0xa4,0x97,0xa3,0xe0, 0xFF}, 0, 0, 0, 0, 0},
  {0x22B000, "Konchu", {0xf0, 0xa4,0xe8,0xb6,0xda,0x9b, 0xFF}, 0, 0, 0, 0, 0},
  {0x230000, "Maccao", {0xf0, 0xd3,0xb8,0xa0,0x9e, 0xFF}, 0, 0, 0, 0, 0},
  {0x235080, "Larinoth", {0xf0, 0xdf,0xd7,0xb0,0xbd,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x23A080, "Moofah", {0xf0, 0xd5,0xee,0xca,0x96, 0xFF}, 0, 0, 0, 0, 0},
  {0x2D5000, "Gt. Thdrbg", {0xf2, 0x00,0x01,0x02,0x03, 0xFF}, 0, 0, 0, 0, 0},
  {0x2DA000, "Conga", {0xf0, 0xa8,0xe8,0xa1, 0xFF}, 0, 0, 0, 0, 0},
  {0x190060, "Gt. Maccao", {0xf0, 0xbe,0xae,0xd3,0xb8,0xa0,0x9e, 0xFF}, 0, 797.3, 718, 917, 981},
  {0x069020, "Velocidrom", {0xf0, 0xbe,0xae,0xde,0xe8,0xd2,0xae, 0xFF}, 0, 868, 781, 998, 1068},
  {0x0B4004, "Bulldrome", {0xf0, 0xbe,0xae,0xca,0x96,0xe8,0xa9, 0xFF}, 0, 566, 509, 651, 696},
  {0x163004, "Seltas", {0xf0, 0x97,0xe0,0xb0,0xe0,0xb4,0xae, 0xFF}, 0, 616, 554, 708, 758},
  {0x154044, "Sel. Queen", {0xf0, 0xa7,0xc2,0xe0,0x05,0xb0,0xe0,0xb4,0xae, 0xFF}, 0, 1445, 1300, 1662, 1777},
  {0x15404C, "Sel. Queen", {0xf2, 0x04,0x05, 0xf0, 0xa7,0xc2,0xe0,0x05,0xb0,0xe0,0xb4,0xae, 0xFF}, 1, 1445, 1300, 1662, 1777},
  {0x11D044, "Arzuros", {0xf0, 0x97,0x9f,0x97,0xac,0xde, 0xFF}, 0, 563, 506, 647, 692},
  {0x122044, "Redhelm", {0xf2, 0x06,0x07, 0xf0, 0x97,0x9f,0x97,0xac,0xde, 0xFF}, 0, 822, 789, 863, 896},
  {0x294020, "Giadrome", {0xf0, 0xbe,0xae,0xa3,0x97,0xc3,0xae, 0xFF}, 0, 867, 780, 997, 1066},
  {0x06E020, "Gendrome", {0xf0, 0xbe,0xae,0xa7,0xc2,0xd2,0xae, 0xFF}, 0, 864.5, 778, 994, 1063},
  {0x078044, "Cephadrome", {0xf0, 0xbe,0xae,0xa1,0xe1,0x9f,0xae, 0xFF}, 0, 1678, 1510, 1929, 2063},
  {0x055044, "Yian K.K.", {0xf0, 0x99,0xd8,0xe8,0xa4,0xb8,0xa4, 0xFF}, 0, 899, 809, 1033, 1105},
  {0x05504C, "Yian K.K.", {0xf2, 0x04,0x05, 0xf0, 0x99,0xd8,0xe8,0xa4,0xb8,0xa4, 0xFF}, 1, 899, 809, 1033, 1105},
  {0x073020, "Iodrome", {0xf0, 0xbe,0xae,0x99,0xee,0x9f,0xae, 0xFF}, 0, 912, 821, 1048, 1121},
  {0x13B044, "K. Wacha", {0xf0, 0xa6,0xb6,0xd8,0xe4,0xb6,0xd8, 0xFF}, 0, 886, 797, 966, 1010},
  {0x13B04C, "K. Wacha", {0xf2, 0x04,0x05, 0xf0, 0xa6,0xb6,0xd8,0xe4,0xb6,0xd8, 0xFF}, 1, 886, 797, 966, 1010},
  {0x127004, "Lagombi", {0xf0, 0x9b,0xe0,0xa4,0xae,0xae, 0xFF}, 0, 527, 475, 606, 649},
  {0x12C004, "Snowbaron", {0xf2, 0x00,0x08,0x09, 0xf0, 0x9b,0xe0,0xa4,0xae,0xae, 0xFF}, 0, 639, 620, 748, 787},
  {0x05A044, "Gypceros", {0xf0, 0xa7,0xdf,0xdc,0xae, 0xFF}, 0, 991, 892, 1140, 1219},
  {0x05A04C, "Gypceros", {0xf2, 0x04,0x05, 0xf0, 0xa7,0xdf,0xdc,0xae, 0xFF}, 1, 991, 892, 1140, 1219},
  {0x140044, "Tetsucabra", {0xf0, 0xbb,0xb9,0xa0,0xcb,0xde, 0xFF}, 0, 1266, 1139, 1456, 1557},
  {0x14004C, "Tetsucabra", {0xf2, 0x04,0x05, 0xf0, 0xbb,0xb9,0xa0,0xcb,0xde, 0xFF}, 1, 1266, 1139, 1456, 1557},
  {0x145044, "Drilltusk", {0xf2, 0x0a,0x0b, 0xf0, 0xbb,0xb9,0xa0,0xcb,0xde, 0xFF}, 0, 1513, 1452, 1589, 1649},
  {0x087044, "Daimyo H.", {0xf0, 0xb5,0x99,0xd4,0xdc,0x9b,0xab,0xab,0xd4, 0xFF}, 0, 495, 446, 569, 609},
  {0x08704C, "Daimyo H.", {0xf2, 0x04,0x05, 0xf0, 0xb5,0x99,0xd4,0xdc,0x9b,0xab,0xab,0xd4, 0xFF}, 1, 495, 446, 569, 609},
  {0x08C044, "Stonefist", {0xf2, 0x0c,0x0d, 0xf0, 0xb5,0x99,0xd4,0xdc,0x9b,0xab,0xab,0xd4, 0xFF}, 0, 1495, 1450, 1704, 1779},
  {0x131044, "Volvidon", {0xf0, 0xde,0xe8,0xa5,0xe2,0xbd,0xde, 0xFF}, 0, 697, 627, 801, 857},
  {0x28F044, "Congalala", {0xf0, 0xc5,0xc5,0xa8,0xe8,0xa1, 0xFF}, 0, 984, 886, 1132, 1210},
  {0x28F04C, "Congalala", {0xf2, 0x04,0x05, 0xf0, 0xc5,0xc5,0xa8,0xe8,0xa1, 0xFF}, 1, 984, 886, 1132, 1210},
  {0x0F5044, "R. Ludroth", {0xf0, 0xe2,0x97,0xe0,0xbe,0xe2,0xae, 0xFF}, 0, 1545, 1391, 1777, 1901},
  {0x0F504C, "R. Ludroth", {0xf2, 0x04,0x05, 0xf0, 0xe2,0x97,0xe0,0xbe,0xe2,0xae, 0xFF}, 1, 1545, 1391, 1777, 1901},
  {0x29E044, "Barroth", {0xf0, 0xd1,0xe0,0xd1,0xe2,0xae, 0xFF}, 0, 1406, 1266, 1617, 1730},
  {0x29E04C, "Barroth", {0xf2, 0x04,0x05, 0xf0, 0xd1,0xe0,0xd1,0xe2,0xae, 0xFF}, 1, 1406, 1266, 1617, 1730},
  {0x262044, "Basarios", {0xf0, 0xc5,0xaa,0xe0,0xd7,0xae, 0xFF}, 0, 1426, 1284, 1640, 1755},
  {0x26204C, "Basarios", {0xf2, 0x04,0x05, 0xf0, 0xc5,0xaa,0xe0,0xd7,0xae, 0xFF}, 1, 1426, 1284, 1640, 1755},
  {0x16D044, "Malfestio", {0xf0, 0xd0,0xe2,0xe2,0xd0,0xe0,0xe0, 0xFF}, 0, 612, 550, 703, 752},
  {0x16D04C, "Malfestio", {0xf2, 0x04,0x05, 0xf0, 0xd0,0xe2,0xe2,0xd0,0xe0,0xe0, 0xFF}, 1, 612, 550, 703, 752},
  {0x2B2044, "Hazewing", {0xf2, 0x0e,0x0f, 0xf0, 0xd0,0xe2,0xe2,0xd0,0xe0,0xe0, 0xFF}, 0, 733, 711, 858, 902},
  {0x14A044, "Zamtrios", {0xf0, 0xab,0xd1,0x97,0xab,0xa3,0xe0, 0xFF}, 0, 1520, 1368, 1748, 1869},
  {0x14A04C, "Zamtrios", {0xf2, 0x04,0x05, 0xf0, 0xab,0xd1,0x97,0xab,0xa3,0xe0, 0xFF}, 1, 1520, 1368, 1748, 1869},
  {0x050044, "Khezu", {0xf0, 0xca,0xe0,0xca,0xe0, 0xFF}, 0, 872, 785, 950, 994},
  {0x05004C, "Khezu", {0xf2, 0x04,0x05, 0xf0, 0xca,0xe0,0xca,0xe0, 0xFF}, 1, 872, 785, 950, 994},
  {0x2A8004, "Nerscylla", {0xf0, 0xc2,0xe0,0xae,0xa2,0xda,0xde, 0xFF}, 0, 999, 899, 1119, 1179},
  {0x2A800C, "Nerscylla", {0xf2, 0x04,0x05, 0xf0, 0xc2,0xe0,0xae,0xa2,0xda,0xde, 0xFF}, 1, 999, 899, 1119, 1179},
  {0x032044, "Rathian", {0xf0, 0xdf,0x9f,0xe1,0x99,0x97, 0xFF}, 0, 1654, 1489, 1902, 2035},
  {0x03204C, "Rathian", {0xf2, 0x04,0x05, 0xf0, 0xdf,0x9f,0xe1,0x99,0x97, 0xFF}, 1, 1654, 1489, 1902, 2035},
  {0x037044, "Gld. Rath.", {0xf0, 0xdf,0x9f,0xe1,0x99,0x97, 0xf2, 0x10,0x11,0x12, 0xFF}, 0, 1654, 1605, 1936, 2035},
  {0x03704C, "Gld. Rath.", {0xf2, 0x04,0x05, 0xf0, 0xdf,0x9f,0xe1,0x99,0x97, 0xf2, 0x10,0x11,0x12, 0xFF}, 1, 1654, 1605, 1936, 2035},
  {0x03C044, "Dreadqueen", {0xf2, 0x13,0x14,0x15, 0xf0, 0xdf,0x9f,0xe1,0x99,0x97, 0xFF}, 0, 2056, 1973, 2158, 2241},
  {0x041044, "Rathalos", {0xf0, 0xdf,0x9f,0xe1,0x9b,0xae, 0xFF}, 0, 1711, 1540, 1968, 2105},
  {0x04104C, "Rathalos", {0xf2, 0x04,0x05, 0xf0, 0xdf,0x9f,0xe1,0x9b,0xae, 0xFF}, 1, 1711, 1540, 1968, 2105},
  {0x046044, "Slv. Rath.", {0xf0, 0xdf,0x9f,0xe1,0x9b,0xae, 0xf2, 0x10,0x11,0x12, 0xFF}, 0, 1711, 1660, 2002, 2105},
  {0x04604C, "Slv. Rath.", {0xf2, 0x04,0x05, 0xf0, 0xdf,0x9f,0xe1,0x9b,0xae, 0xf2, 0x10,0x11,0x12, 0xFF}, 1, 1711, 1660, 2002, 2105},
  {0x04B044, "Dreadking", {0xf2, 0x16,0x17,0x18, 0xf0, 0xdf,0x9f,0xe1,0x9b,0xae, 0xFF}, 0, 2058, 1975, 2161, 2243},
  {0x109004, "Nibelsnarf", {0xf0, 0xc4,0xcc,0xe0,0xd1,0xb8,0xa0, 0xFF}, 0, 2040, 1836, 2347, 2510},
  {0x10900C, "Nibelsnarf", {0xf2, 0x04,0x05, 0xf0, 0xc4,0xcc,0xe0,0xd1,0xb8,0xa0, 0xFF}, 1, 2040, 1836, 2347, 2510},
  {0x05F044, "Plesioth", {0xf0, 0xa1,0xc3,0xbd,0xbd,0xae, 0xFF}, 0, 2625, 2362, 3019, 3229},
  {0x05F04C, "Plesioth", {0xf2, 0x04,0x05, 0xf0, 0xa1,0xc3,0xbd,0xbd,0xae, 0xFF}, 1, 2625, 2362, 3019, 3229},
  {0x096044, "Blangonga", {0xf0, 0xbe,0xbe,0xcb,0xde,0xe8,0xa9, 0xFF}, 0, 860, 774, 989, 1058},
  {0x09604C, "Blangonga", {0xf2, 0x04,0x05, 0xf0, 0xbe,0xbe,0xcb,0xde,0xe8,0xa9, 0xFF}, 1, 860, 774, 989, 1058},
  {0x0C8044, "Lavasioth", {0xf0, 0xe9,0x9e,0xe0,0xa1,0xc3,0xae, 0xFF}, 0, 2078, 1870, 2389, 2556},
  {0x0C804C, "Lavasioth", {0xf2, 0x04,0x05, 0xf0, 0xe9,0x9e,0xe0,0xa1,0xc3,0xae, 0xFF}, 1, 2078, 1870, 2389, 2556},
  {0x091044, "Shogun C.", {0xf0, 0xac,0xdc,0x9b,0xa5,0xe8,0xa3,0xab,0xd4, 0xFF}, 0, 598, 538, 688, 736},
  {0x09104C, "Shogun C.", {0xf2, 0x04,0x05, 0xf0, 0xac,0xdc,0x9b,0xa5,0xe8,0xa3,0xab,0xd4, 0xFF}, 1, 598, 538, 688, 736},
  {0x28A044, "Shredclaw", {0xf2, 0x19,0x1a, 0xf0, 0xac,0xdc,0x9b,0xa5,0xe8,0xa3,0xab,0xd4, 0xFF}, 0, 688, 661, 757, 785},
  {0x14F004, "Najarala", {0xf0, 0xa1,0xde,0xde,0x97,0xad,0xd8,0xde, 0xFF}, 0, 4055, 3650, 4663, 4988},
  {0x14F00C, "Najarala", {0xf2, 0x04,0x05, 0xf0, 0xa1,0xde,0xde,0x97,0xad,0xd8,0xde, 0xFF}, 1, 4055, 3650, 4663, 4988},
  {0x0CD044, "Nargacuga", {0xf0, 0xbf,0xe0,0xa1,0xa4,0xe0,0xa1, 0xFF}, 0, 1602, 1442, 1843, 1971},
  {0x0CD04C, "Nargacuga", {0xf2, 0x04,0x05, 0xf0, 0xbf,0xe0,0xa1,0xa4,0xe0,0xa1, 0xFF}, 1, 1602, 1442, 1843, 1971},
  {0x0D2044, "Silverwind", {0xf2, 0x1b,0x1c,0x1d, 0xf0, 0xbf,0xe0,0xa1,0xa4,0xe0,0xa1, 0xFF}, 0, 1702, 1651, 1992, 2094},
  {0x07D044, "Y. Garuga", {0xf0, 0x99,0xd8,0xe8,0xa1,0xe0,0xe0,0xa1, 0xFF}, 0, 1396, 1256, 1605, 1717},
  {0x07D04C, "Y. Garuga", {0xf2, 0x04,0x05, 0xf0, 0x99,0xd8,0xe8,0xa1,0xe0,0xe0,0xa1, 0xFF}, 1, 1396, 1256, 1605, 1717},
  {0x082044, "Deadeye", {0xf2, 0x1e,0x1f, 0xf0, 0x99,0xd8,0xe8,0xa1,0xe0,0xe0,0xa1, 0xFF}, 0, 1186, 1151, 1388, 1459},
  {0x0E6044, "Uragaan", {0xf0, 0x9b,0xde,0xa1,0xe8,0xa2,0xe8, 0xFF}, 0, 2085, 1877, 2398, 2565},
  {0x0E604C, "Uragaan", {0xf2, 0x04,0x05, 0xf0, 0x9b,0xde,0xa1,0xe8,0xa2,0xe8, 0xFF}, 1, 2085, 1877, 2398, 2565},
  {0x0EB044, "Crystalbrd", {0xf2, 0x20,0x21, 0xf0, 0x9b,0xde,0xa1,0xe8,0xa2,0xe8, 0xFF}, 0, 2655, 2549, 2787, 2894},
  {0x0F0044, "Lagiacrus", {0xf0, 0xde,0xa3,0x97,0xa4,0xe0,0xae, 0xFF}, 0, 2649, 2384, 3046, 3258},
  {0x0F004C, "Lagiacrus", {0xf2, 0x04,0x05, 0xf0, 0xde,0xa3,0x97,0xa4,0xe0,0xae, 0xFF}, 1, 2649, 2384, 3046, 3258},
  {0x10E044, "Zinogre", {0xf0, 0xad,0xe8,0x9f,0x9b,0xa1, 0xFF}, 0, 1455, 1310, 1674, 1790},
  {0x10E04C, "Zinogre", {0xf2, 0x04,0x05, 0xf0, 0xad,0xe8,0x9f,0x9b,0xa1, 0xFF}, 1, 1455, 1310, 1674, 1790},
  {0x11304C, "Thunderlrd", {0xf2, 0x22,0x01,0x23, 0xf0, 0xad,0xe8,0x9f,0x9b,0xa1, 0xFF}, 0, 1534, 1488, 1795, 1887},
  {0x299044, "Barioth", {0xf0, 0xce,0xdf,0x9f,0xe2,0xae, 0xFF}, 0, 1822, 1640, 2095, 2241},
  {0x29904C, "Barioth", {0xf2, 0x04,0x05, 0xf0, 0xce,0xdf,0x9f,0xe2,0xae, 0xFF}, 1, 1822, 1640, 2095, 2241},
  {0x181044, "Mizutsune", {0xf0, 0xb4,0xd3,0xd4,0xb9,0xc2, 0xFF}, 0, 1885, 1697, 2168, 2319},
  {0x18104C, "Mizutsune", {0xf2, 0x04,0x05, 0xf0, 0xb4,0xd3,0xd4,0xb9,0xc2, 0xFF}, 1, 1885, 1697, 2168, 2319},
  {0x2BC044, "Divinsight", {0xf2, 0x24,0x1f, 0xf0, 0xb4,0xd3,0xd4,0xb9,0xc2, 0xFF}, 0, 2428, 2356, 2671, 2768},
  {0x17C044, "Astalos", {0xf0, 0xde,0x99,0xb1,0xa4,0xae, 0xFF}, 0, 1755, 1580, 2019, 2159},
  {0x17C04C, "Astalos", {0xf2, 0x04,0x05, 0xf0, 0xde,0x99,0xb1,0xa4,0xae, 0xFF}, 1, 1755, 1580, 2019, 2159},
  {0x2B7044, "Azurebolt", {0xf2, 0x25,0x26,0x09, 0xf0, 0xde,0x99,0xb1,0xa4,0xae, 0xFF}, 0, 2219, 2131, 2330, 2419},
  {0x186004, "Gammoth", {0xf0, 0xa1,0xd5,0xee,0xbd, 0xFF}, 0, 2276, 2048, 2481, 2595},
  {0x18600C, "Gammoth", {0xf2, 0x04,0x05, 0xf0, 0xa1,0xd5,0xee,0xbd, 0xFF}, 1, 2276, 2048, 2481, 2595},
  {0x2C1004, "Frostpeak", {0xf2, 0x27,0x28, 0xf0, 0xa1,0xd5,0xee,0xbd, 0xFF}, 0, 2276, 2208, 2504, 2595},
  {0x172044, "Glavenus", {0xf0, 0xbc,0x98,0xc3,0xc5,0xe0,0xbe, 0xFF}, 0, 2539, 2286, 2920, 3124},
  {0x17204C, "Glavenus", {0xf2, 0x04,0x05, 0xf0, 0xbc,0x98,0xc3,0xc5,0xe0,0xbe, 0xFF}, 1, 2539, 2286, 2920, 3124},
  {0x17704C, "Hellblade", {0xf2, 0x29,0x2a,0x2b, 0xf0, 0xbc,0x98,0xc3,0xc5,0xe0,0xbe, 0xFF}, 0, 2841, 2756, 3239, 3381},
  {0x0FA044, "Agnaktor", {0xf0, 0x97,0xa5,0xbf,0xa8,0xbd,0xe0, 0xFF}, 0, 2737, 2464, 3148, 3367},
  {0x0FA04C, "Agnaktor", {0xf2, 0x04,0x05, 0xf0, 0x97,0xa5,0xbf,0xa8,0xbd,0xe0, 0xFF}, 1, 2737, 2464, 3148, 3367},
  {0x159044, "G. Magala", {0xf0, 0xa9,0x97,0x05,0xd3,0xa1,0xde, 0xFF}, 0, 1761, 1585, 2025, 2166},
  {0x15904C, "G. Magala", {0xf2, 0x04,0x05, 0xf0, 0xa9,0x97,0x05,0xd3,0xa1,0xde, 0xFF}, 1, 1761, 1585, 2025, 2166},
  {0x2AD044, "Chaotic GM", {0xf2, 0x2c,0x2d,0x2e, 0xf0, 0x51,0xa9,0x97,0x05,0xd3,0xa1,0xde, 0xFF}, 0, 1795, 1615, 2064, 2207},
  {0x168044, "Seregios", {0xf0, 0xb0,0xe0,0xe1,0xa3,0x9f,0xae, 0xFF}, 0, 1728, 1555, 1884, 1970},
  {0x16804C, "Seregios", {0xf2, 0x04,0x05, 0xf0, 0xb0,0xe0,0xe1,0xa3,0x9f,0xae, 0xFF}, 1, 1728, 1555, 1884, 1970},
  {0x104044, "Duramboros", {0xf0, 0xbe,0xd1,0xe0,0xce,0xe0,0xa4, 0xFF}, 0, 2084, 1876, 2397, 2564},
  {0x10404C, "Duramboros", {0xf2, 0x04,0x05, 0xf0, 0xbe,0xd1,0xe0,0xce,0xe0,0xa4, 0xFF}, 1, 2084, 1876, 2397, 2564},
  {0x0B9044, "Tigrex", {0xf0, 0xbb,0x98,0xa1,0xe1,0xb8,0xa4,0xae, 0xFF}, 0, 1735, 1562, 1996, 2135},
  {0x0B904C, "Tigrex", {0xf2, 0x04,0x05, 0xf0, 0xbb,0x98,0xa1,0xe1,0xb8,0xa4,0xae, 0xFF}, 1, 1735, 1562, 1996, 2135},
  {0x0BE044, "Grimclaw", {0xf2, 0x2f,0x30,0x31, 0xf0, 0xbb,0x98,0xa1,0xe1,0xb8,0xa4,0xae, 0xFF}, 0, 2121, 2036, 2227, 2312},
  {0x267044, "Gravios", {0xf0, 0xa5,0xde,0xc8,0xd7,0xae, 0xFF}, 0, 2099, 1889, 2414, 2581},
  {0x26704C, "Gravios", {0xf2, 0x04,0x05, 0xf0, 0xa5,0xde,0xc8,0xd7,0xae, 0xFF}, 1, 2099, 1889, 2414, 2581},
  {0x26C044, "Diablos", {0xf0, 0xbc,0x98,0x97,0xcb,0xe2,0xae, 0xFF}, 0, 1993, 1794, 2292, 2451},
  {0x26C04C, "Diablos", {0xf2, 0x04,0x05, 0xf0, 0xbc,0x98,0x97,0xcb,0xe2,0xae, 0xFF}, 1, 1993, 1794, 2292, 2451},
  {0x271044, "Bloodlust", {0xf2, 0x32,0x33, 0xf0, 0xbc,0x98,0x97,0xcb,0xe2,0xae, 0xFF}, 0, 2409, 2313, 2650, 2747},
  {0x064008, "Kirin", {0xf0, 0xa2,0xdf,0xe8, 0xFF}, 0, 550, 495, 643, 676},
  {0x136044, "Brachydios", {0xf0, 0xcb,0xde,0xa2,0xbc,0x98,0x9f,0xae, 0xFF}, 0, 1522, 1370, 1750, 1872},
  {0x13604C, "Brachydios", {0xf2, 0x04,0x05, 0xf0, 0xcb,0xde,0xa2,0xbc,0x98,0x9f,0xae, 0xFF}, 1, 1522, 1370, 1750, 1872},
  {0x2A3044, "Rg. Brachy", {0xf2, 0x05, 0xf0, 0x8c, 0xf2, 0x34, 0xf0, 0x5e,0x8d,0xcb,0xde,0xa2, 0xFF}, 0, 1522, 1370, 1750, 1872},
  {0x15E04C, "S. Magala", {0xf0, 0xac,0xd8,0xa1,0xe0,0xd3,0xa1,0xde, 0xFF}, 0, 1778, 1600, 2080, 2187},
  {0x2C604C, "Valfalk", {0xf0, 0xc5,0xe0,0xca,0x96,0xe0,0xa4, 0xFF}, 0, 2267, 2041, 2539, 2675},
  {0x09B044, "Rajang", {0xf0, 0xde,0xee,0xad,0xd8,0xe8, 0xFF}, 0, 966, 869, 1130, 1188},
  {0x09B04C, "Rajang", {0xf2, 0x04,0x05, 0xf0, 0xde,0xee,0xad,0xd8,0xe8, 0xFF}, 1, 966, 869, 1130, 1188},
  {0x0A004C, "Fr. Rajang", {0xf2, 0x35,0x36, 0xf0, 0x59,0x61,0xde,0xee,0xad,0xd8,0xe8, 0xFF}, 0, 966, 869, 1130, 1188},
  {0x0DC044, "Deviljho", {0xf0, 0x99,0xc8,0xe0,0xad,0xdc,0xee, 0xFF}, 0, 2047, 1842, 2456, 2620},
  {0x0DC04C, "Deviljho", {0xf2, 0x04,0x05, 0xf0, 0x99,0xc8,0xe0,0xad,0xdc,0xee, 0xFF}, 1, 2047, 1842, 2456, 2620},
  {0x0E1044, "Savage D.", {0xf2, 0x37, 0xf0, 0x8c, 0xf2, 0x38, 0xf0, 0x8b,0x48,0xad,0xdc,0xee, 0xFF}, 0, 2047, 1842, 2456, 2620},
  {0x0A5044, "K. Daora", {0xf0, 0xa4,0xac,0xd8,0xe0,0xb5,0x9f,0xde, 0xFF}, 0, 1801, 1621, 2108, 2216},
  {0x0AA04C, "Chameleos", {0xf0, 0x9f,0x9f,0xbf,0xaf,0xb6, 0xFF}, 0, 1993, 1794, 2332, 2451},
  {0x0AF04C, "Teostra", {0xf0, 0xbb,0x9f,0x05,0xbb,0xae,0xa0,0xbd,0xe0, 0xFF}, 0, 1740, 1566, 2036, 2140},
  {0x27600C, "LaoShan L.", {0xf0, 0xde,0x9f,0xac,0xd8,0xe8,0xe2,0xe8, 0xFF}, 0, 0, 0, 0, 0},
  {0x0C304C, "Akantor", {0xf0, 0x97,0xa0,0xd5,0xbd,0xe0,0xd5, 0xFF}, 0, 0, 0, 0, 0},
  {0x0D704C, "Ukanlos", {0xf0, 0x9b,0xa0,0xd5,0xe0,0xc5,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x11800C, "Amatsu", {0xf0, 0x97,0xd3,0xb9,0xd3,0xa1,0xb9,0xb6, 0xFF}, 0, 0, 0, 0, 0},
  {0x18B00C, "Nakarkos", {0xf0, 0x9f,0xae,0xbd,0xa1,0xe2,0x97, 0xFF}, 0, 0, 0, 0, 0},
  {0x00000C, "Tentacle", {0xf2, 0x39,0x3a, 0xFF}, 0, 0, 0, 0, 0},
  {0x2CB00C, "Altal Thrn", {0xf0, 0x97,0xbd,0xde,0xe0,0x05,0xc2,0xb0,0xbd, 0xFF}, 0, 0, 0, 0, 0},
  {0x2D0004, "Atlal Ka", {0xf0, 0x97,0xbd,0xde,0xe0,0x05,0xa0, 0xFF}, 0, 0, 0, 0, 0},
  {0x0FF04C, "Alatreon", {0xf0, 0x97,0xe0,0xc5,0xbd,0xdf,0x9f,0xe8, 0xFF}, 0, 0, 0, 0, 0},
  {0x27B00C, "Fatalis", {0xf0, 0xd4,0xde,0xd1,0xe1,0x97,0xae, 0xFF}, 0, 0, 0, 0, 0},
  {0x28000C, "Crimson F.", {0xf0, 0xd4,0xde,0xc5,0xe0,0xa0,0xe8, 0xFF}, 0, 0, 0, 0, 0},
  {0x28500C, "White F.", {0xf0, 0xd4,0xde,0xe0,0xee,0xb9, 0xFF}, 0, 0, 0, 0, 0},
  {0x244000, "Expl. Rock", {0xf2, 0x34,0x3b,0x0a, 0xFF}, 0, 0, 0, 0, 0},
  {0x24E000, "Rock", {0xf2, 0x0a, 0xFF}, 0, 0, 0, 0, 0},
};

//static vars
static MonsterCache m_cache[2]; //assume only 2 big monsters are active at a time

inline u8 isSmallMonster(Monster* m)
{
  return m->identifier2 == 0 || m->identifier2 == 0x80;
}

static int compareMonsterInfo(const void* p1, const void* p2);

void initMonsterInfoDB();
void updateMonsterCache(MonsterPointerList* list);

u8 getMonsterCount(MonsterPointerList* list, u8 show_small_monsters);
MonsterInfo* getMonsterInfoFromDB(Monster* m);
MonsterInfo* getMonsterInfoByIndex(u8 index);
MonsterCache* getCachedMonsterByIndex(u8 index);
MonsterCache* getCachedMonsterByPointer(Monster* m);
